#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaurusCapstone
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PMS_DB")]
	public partial class PMSDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCostProposal(CostProposal instance);
    partial void UpdateCostProposal(CostProposal instance);
    partial void DeleteCostProposal(CostProposal instance);
    partial void InsertCostProposalScope(CostProposalScope instance);
    partial void UpdateCostProposalScope(CostProposalScope instance);
    partial void DeleteCostProposalScope(CostProposalScope instance);
    partial void InsertDesignLead(DesignLead instance);
    partial void UpdateDesignLead(DesignLead instance);
    partial void DeleteDesignLead(DesignLead instance);
    partial void InsertDesignLeadFindingSubmission(DesignLeadFindingSubmission instance);
    partial void UpdateDesignLeadFindingSubmission(DesignLeadFindingSubmission instance);
    partial void DeleteDesignLeadFindingSubmission(DesignLeadFindingSubmission instance);
    partial void InsertDesignOfficer(DesignOfficer instance);
    partial void UpdateDesignOfficer(DesignOfficer instance);
    partial void DeleteDesignOfficer(DesignOfficer instance);
    partial void InsertDLAssignment(DLAssignment instance);
    partial void UpdateDLAssignment(DLAssignment instance);
    partial void DeleteDLAssignment(DLAssignment instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertImpactAnalysi(ImpactAnalysi instance);
    partial void UpdateImpactAnalysi(ImpactAnalysi instance);
    partial void DeleteImpactAnalysi(ImpactAnalysi instance);
    partial void InsertImpactAnalysisUpload(ImpactAnalysisUpload instance);
    partial void UpdateImpactAnalysisUpload(ImpactAnalysisUpload instance);
    partial void DeleteImpactAnalysisUpload(ImpactAnalysisUpload instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectCharter(ProjectCharter instance);
    partial void UpdateProjectCharter(ProjectCharter instance);
    partial void DeleteProjectCharter(ProjectCharter instance);
    partial void InsertProjectCharterSubmission(ProjectCharterSubmission instance);
    partial void UpdateProjectCharterSubmission(ProjectCharterSubmission instance);
    partial void DeleteProjectCharterSubmission(ProjectCharterSubmission instance);
    partial void InsertProjectDefinition(ProjectDefinition instance);
    partial void UpdateProjectDefinition(ProjectDefinition instance);
    partial void DeleteProjectDefinition(ProjectDefinition instance);
    partial void InsertScopeDeliverable(ScopeDeliverable instance);
    partial void UpdateScopeDeliverable(ScopeDeliverable instance);
    partial void DeleteScopeDeliverable(ScopeDeliverable instance);
    partial void InsertTaskCreation(TaskCreation instance);
    partial void UpdateTaskCreation(TaskCreation instance);
    partial void DeleteTaskCreation(TaskCreation instance);
    partial void InsertTaskFinding(TaskFinding instance);
    partial void UpdateTaskFinding(TaskFinding instance);
    partial void DeleteTaskFinding(TaskFinding instance);
    partial void InsertTaskLead(TaskLead instance);
    partial void UpdateTaskLead(TaskLead instance);
    partial void DeleteTaskLead(TaskLead instance);
    partial void InsertTaskLeadAssignment(TaskLeadAssignment instance);
    partial void UpdateTaskLeadAssignment(TaskLeadAssignment instance);
    partial void DeleteTaskLeadAssignment(TaskLeadAssignment instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertFinding(Finding instance);
    partial void UpdateFinding(Finding instance);
    partial void DeleteFinding(Finding instance);
    partial void InsertTaskLeadFindingSubmission(TaskLeadFindingSubmission instance);
    partial void UpdateTaskLeadFindingSubmission(TaskLeadFindingSubmission instance);
    partial void DeleteTaskLeadFindingSubmission(TaskLeadFindingSubmission instance);
    #endregion
		
		public PMSDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PMS_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PMSDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMSDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMSDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMSDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<CostProposal> CostProposals
		{
			get
			{
				return this.GetTable<CostProposal>();
			}
		}
		
		public System.Data.Linq.Table<CostProposalScope> CostProposalScopes
		{
			get
			{
				return this.GetTable<CostProposalScope>();
			}
		}
		
		public System.Data.Linq.Table<DesignLead> DesignLeads
		{
			get
			{
				return this.GetTable<DesignLead>();
			}
		}
		
		public System.Data.Linq.Table<DesignLeadFindingSubmission> DesignLeadFindingSubmissions
		{
			get
			{
				return this.GetTable<DesignLeadFindingSubmission>();
			}
		}
		
		public System.Data.Linq.Table<DesignOfficer> DesignOfficers
		{
			get
			{
				return this.GetTable<DesignOfficer>();
			}
		}
		
		public System.Data.Linq.Table<DLAssignment> DLAssignments
		{
			get
			{
				return this.GetTable<DLAssignment>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<ImpactAnalysi> ImpactAnalysis
		{
			get
			{
				return this.GetTable<ImpactAnalysi>();
			}
		}
		
		public System.Data.Linq.Table<ImpactAnalysisUpload> ImpactAnalysisUploads
		{
			get
			{
				return this.GetTable<ImpactAnalysisUpload>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectCharter> ProjectCharters
		{
			get
			{
				return this.GetTable<ProjectCharter>();
			}
		}
		
		public System.Data.Linq.Table<ProjectCharterSubmission> ProjectCharterSubmissions
		{
			get
			{
				return this.GetTable<ProjectCharterSubmission>();
			}
		}
		
		public System.Data.Linq.Table<ProjectDefinition> ProjectDefinitions
		{
			get
			{
				return this.GetTable<ProjectDefinition>();
			}
		}
		
		public System.Data.Linq.Table<ScopeDeliverable> ScopeDeliverables
		{
			get
			{
				return this.GetTable<ScopeDeliverable>();
			}
		}
		
		public System.Data.Linq.Table<TaskCreation> TaskCreations
		{
			get
			{
				return this.GetTable<TaskCreation>();
			}
		}
		
		public System.Data.Linq.Table<TaskFinding> TaskFindings
		{
			get
			{
				return this.GetTable<TaskFinding>();
			}
		}
		
		public System.Data.Linq.Table<TaskLead> TaskLeads
		{
			get
			{
				return this.GetTable<TaskLead>();
			}
		}
		
		public System.Data.Linq.Table<TaskLeadAssignment> TaskLeadAssignments
		{
			get
			{
				return this.GetTable<TaskLeadAssignment>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Finding> Findings
		{
			get
			{
				return this.GetTable<Finding>();
			}
		}
		
		public System.Data.Linq.Table<TaskLeadFindingSubmission> TaskLeadFindingSubmissions
		{
			get
			{
				return this.GetTable<TaskLeadFindingSubmission>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientMobileNumber;
		
		private string _ClientNumber;
		
		private string _ClientEmail;
		
		private string _Password;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientMobileNumberChanging(string value);
    partial void OnClientMobileNumberChanged();
    partial void OnClientNumberChanging(string value);
    partial void OnClientNumberChanged();
    partial void OnClientEmailChanging(string value);
    partial void OnClientEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientMobileNumber", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ClientMobileNumber
		{
			get
			{
				return this._ClientMobileNumber;
			}
			set
			{
				if ((this._ClientMobileNumber != value))
				{
					this.OnClientMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._ClientMobileNumber = value;
					this.SendPropertyChanged("ClientMobileNumber");
					this.OnClientMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientNumber", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ClientNumber
		{
			get
			{
				return this._ClientNumber;
			}
			set
			{
				if ((this._ClientNumber != value))
				{
					this.OnClientNumberChanging(value);
					this.SendPropertyChanging();
					this._ClientNumber = value;
					this.SendPropertyChanged("ClientNumber");
					this.OnClientNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClientEmail
		{
			get
			{
				return this._ClientEmail;
			}
			set
			{
				if ((this._ClientEmail != value))
				{
					this.OnClientEmailChanging(value);
					this.SendPropertyChanging();
					this._ClientEmail = value;
					this.SendPropertyChanged("ClientEmail");
					this.OnClientEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostProposal")]
	public partial class CostProposal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostProposalID;
		
		private string _Status;
		
		private string _Category;
		
		private string _Description;
		
		private string _ClientNotes;
		
		private System.Nullable<int> _ClientDecision;
		
		private System.Nullable<int> _ClientID;
		
		private System.DateTime _date;
		
		private System.Nullable<int> _ProjectID;
		
		private EntitySet<CostProposalScope> _CostProposalScopes;
		
		private EntitySet<ProjectDefinition> _ProjectDefinitions;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostProposalIDChanging(int value);
    partial void OnCostProposalIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnClientNotesChanging(string value);
    partial void OnClientNotesChanged();
    partial void OnClientDecisionChanging(System.Nullable<int> value);
    partial void OnClientDecisionChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    #endregion
		
		public CostProposal()
		{
			this._CostProposalScopes = new EntitySet<CostProposalScope>(new Action<CostProposalScope>(this.attach_CostProposalScopes), new Action<CostProposalScope>(this.detach_CostProposalScopes));
			this._ProjectDefinitions = new EntitySet<ProjectDefinition>(new Action<ProjectDefinition>(this.attach_ProjectDefinitions), new Action<ProjectDefinition>(this.detach_ProjectDefinitions));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostProposalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostProposalID
		{
			get
			{
				return this._CostProposalID;
			}
			set
			{
				if ((this._CostProposalID != value))
				{
					this.OnCostProposalIDChanging(value);
					this.SendPropertyChanging();
					this._CostProposalID = value;
					this.SendPropertyChanged("CostProposalID");
					this.OnCostProposalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientNotes", DbType="VarChar(50)")]
		public string ClientNotes
		{
			get
			{
				return this._ClientNotes;
			}
			set
			{
				if ((this._ClientNotes != value))
				{
					this.OnClientNotesChanging(value);
					this.SendPropertyChanging();
					this._ClientNotes = value;
					this.SendPropertyChanged("ClientNotes");
					this.OnClientNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientDecision", DbType="Int")]
		public System.Nullable<int> ClientDecision
		{
			get
			{
				return this._ClientDecision;
			}
			set
			{
				if ((this._ClientDecision != value))
				{
					this.OnClientDecisionChanging(value);
					this.SendPropertyChanging();
					this._ClientDecision = value;
					this.SendPropertyChanged("ClientDecision");
					this.OnClientDecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposal_CostProposalScope", Storage="_CostProposalScopes", ThisKey="CostProposalID", OtherKey="CostProposalID")]
		public EntitySet<CostProposalScope> CostProposalScopes
		{
			get
			{
				return this._CostProposalScopes;
			}
			set
			{
				this._CostProposalScopes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposal_ProjectDefinition", Storage="_ProjectDefinitions", ThisKey="CostProposalID", OtherKey="CostProposalID")]
		public EntitySet<ProjectDefinition> ProjectDefinitions
		{
			get
			{
				return this._ProjectDefinitions;
			}
			set
			{
				this._ProjectDefinitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CostProposal", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.CostProposals.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.CostProposals.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CostProposalScopes(CostProposalScope entity)
		{
			this.SendPropertyChanging();
			entity.CostProposal = this;
		}
		
		private void detach_CostProposalScopes(CostProposalScope entity)
		{
			this.SendPropertyChanging();
			entity.CostProposal = null;
		}
		
		private void attach_ProjectDefinitions(ProjectDefinition entity)
		{
			this.SendPropertyChanging();
			entity.CostProposal = this;
		}
		
		private void detach_ProjectDefinitions(ProjectDefinition entity)
		{
			this.SendPropertyChanging();
			entity.CostProposal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostProposalScope")]
	public partial class CostProposalScope : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScopeID;
		
		private string _ScopeName;
		
		private int _CostProposalID;
		
		private EntitySet<ScopeDeliverable> _ScopeDeliverables;
		
		private EntityRef<CostProposal> _CostProposal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScopeIDChanging(int value);
    partial void OnScopeIDChanged();
    partial void OnScopeNameChanging(string value);
    partial void OnScopeNameChanged();
    partial void OnCostProposalIDChanging(int value);
    partial void OnCostProposalIDChanged();
    #endregion
		
		public CostProposalScope()
		{
			this._ScopeDeliverables = new EntitySet<ScopeDeliverable>(new Action<ScopeDeliverable>(this.attach_ScopeDeliverables), new Action<ScopeDeliverable>(this.detach_ScopeDeliverables));
			this._CostProposal = default(EntityRef<CostProposal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScopeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScopeID
		{
			get
			{
				return this._ScopeID;
			}
			set
			{
				if ((this._ScopeID != value))
				{
					this.OnScopeIDChanging(value);
					this.SendPropertyChanging();
					this._ScopeID = value;
					this.SendPropertyChanged("ScopeID");
					this.OnScopeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScopeName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ScopeName
		{
			get
			{
				return this._ScopeName;
			}
			set
			{
				if ((this._ScopeName != value))
				{
					this.OnScopeNameChanging(value);
					this.SendPropertyChanging();
					this._ScopeName = value;
					this.SendPropertyChanged("ScopeName");
					this.OnScopeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostProposalID", DbType="Int NOT NULL")]
		public int CostProposalID
		{
			get
			{
				return this._CostProposalID;
			}
			set
			{
				if ((this._CostProposalID != value))
				{
					if (this._CostProposal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostProposalIDChanging(value);
					this.SendPropertyChanging();
					this._CostProposalID = value;
					this.SendPropertyChanged("CostProposalID");
					this.OnCostProposalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposalScope_ScopeDeliverable", Storage="_ScopeDeliverables", ThisKey="ScopeID", OtherKey="ScopeID")]
		public EntitySet<ScopeDeliverable> ScopeDeliverables
		{
			get
			{
				return this._ScopeDeliverables;
			}
			set
			{
				this._ScopeDeliverables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposal_CostProposalScope", Storage="_CostProposal", ThisKey="CostProposalID", OtherKey="CostProposalID", IsForeignKey=true)]
		public CostProposal CostProposal
		{
			get
			{
				return this._CostProposal.Entity;
			}
			set
			{
				CostProposal previousValue = this._CostProposal.Entity;
				if (((previousValue != value) 
							|| (this._CostProposal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostProposal.Entity = null;
						previousValue.CostProposalScopes.Remove(this);
					}
					this._CostProposal.Entity = value;
					if ((value != null))
					{
						value.CostProposalScopes.Add(this);
						this._CostProposalID = value.CostProposalID;
					}
					else
					{
						this._CostProposalID = default(int);
					}
					this.SendPropertyChanged("CostProposal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScopeDeliverables(ScopeDeliverable entity)
		{
			this.SendPropertyChanging();
			entity.CostProposalScope = this;
		}
		
		private void detach_ScopeDeliverables(ScopeDeliverable entity)
		{
			this.SendPropertyChanging();
			entity.CostProposalScope = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DesignLead")]
	public partial class DesignLead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private EntitySet<DesignLeadFindingSubmission> _DesignLeadFindingSubmissions;
		
		private EntitySet<DLAssignment> _DLAssignments;
		
		private EntitySet<ImpactAnalysisUpload> _ImpactAnalysisUploads;
		
		private EntitySet<ProjectCharterSubmission> _ProjectCharterSubmissions;
		
		private EntitySet<TaskCreation> _TaskCreations;
		
		private EntitySet<TaskLeadAssignment> _TaskLeadAssignments;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    #endregion
		
		public DesignLead()
		{
			this._DesignLeadFindingSubmissions = new EntitySet<DesignLeadFindingSubmission>(new Action<DesignLeadFindingSubmission>(this.attach_DesignLeadFindingSubmissions), new Action<DesignLeadFindingSubmission>(this.detach_DesignLeadFindingSubmissions));
			this._DLAssignments = new EntitySet<DLAssignment>(new Action<DLAssignment>(this.attach_DLAssignments), new Action<DLAssignment>(this.detach_DLAssignments));
			this._ImpactAnalysisUploads = new EntitySet<ImpactAnalysisUpload>(new Action<ImpactAnalysisUpload>(this.attach_ImpactAnalysisUploads), new Action<ImpactAnalysisUpload>(this.detach_ImpactAnalysisUploads));
			this._ProjectCharterSubmissions = new EntitySet<ProjectCharterSubmission>(new Action<ProjectCharterSubmission>(this.attach_ProjectCharterSubmissions), new Action<ProjectCharterSubmission>(this.detach_ProjectCharterSubmissions));
			this._TaskCreations = new EntitySet<TaskCreation>(new Action<TaskCreation>(this.attach_TaskCreations), new Action<TaskCreation>(this.detach_TaskCreations));
			this._TaskLeadAssignments = new EntitySet<TaskLeadAssignment>(new Action<TaskLeadAssignment>(this.attach_TaskLeadAssignments), new Action<TaskLeadAssignment>(this.detach_TaskLeadAssignments));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_DesignLeadFindingSubmission", Storage="_DesignLeadFindingSubmissions", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<DesignLeadFindingSubmission> DesignLeadFindingSubmissions
		{
			get
			{
				return this._DesignLeadFindingSubmissions;
			}
			set
			{
				this._DesignLeadFindingSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_DLAssignment", Storage="_DLAssignments", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<DLAssignment> DLAssignments
		{
			get
			{
				return this._DLAssignments;
			}
			set
			{
				this._DLAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_ImpactAnalysisUpload", Storage="_ImpactAnalysisUploads", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<ImpactAnalysisUpload> ImpactAnalysisUploads
		{
			get
			{
				return this._ImpactAnalysisUploads;
			}
			set
			{
				this._ImpactAnalysisUploads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_ProjectCharterSubmission", Storage="_ProjectCharterSubmissions", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<ProjectCharterSubmission> ProjectCharterSubmissions
		{
			get
			{
				return this._ProjectCharterSubmissions;
			}
			set
			{
				this._ProjectCharterSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_TaskCreation", Storage="_TaskCreations", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<TaskCreation> TaskCreations
		{
			get
			{
				return this._TaskCreations;
			}
			set
			{
				this._TaskCreations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_TaskLeadAssignment", Storage="_TaskLeadAssignments", ThisKey="DLID", OtherKey="DLID")]
		public EntitySet<TaskLeadAssignment> TaskLeadAssignments
		{
			get
			{
				return this._TaskLeadAssignments;
			}
			set
			{
				this._TaskLeadAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DesignLead", Storage="_Employee", ThisKey="DLID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DesignLead = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DesignLead = this;
						this._DLID = value.EmployeeID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
		
		private void attach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
		
		private void attach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
		
		private void attach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
		
		private void attach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
		
		private void attach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = this;
		}
		
		private void detach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignLead = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DesignLeadFindingSubmission")]
	public partial class DesignLeadFindingSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private int _FindingID;
		
		private int _TaskID;
		
		private System.DateTime _date;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Finding> _Finding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnFindingIDChanging(int value);
    partial void OnFindingIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public DesignLeadFindingSubmission()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._Task = default(EntityRef<Task>);
			this._Finding = default(EntityRef<Finding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FindingID
		{
			get
			{
				return this._FindingID;
			}
			set
			{
				if ((this._FindingID != value))
				{
					if (this._Finding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFindingIDChanging(value);
					this.SendPropertyChanging();
					this._FindingID = value;
					this.SendPropertyChanged("FindingID");
					this.OnFindingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_DesignLeadFindingSubmission", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.DesignLeadFindingSubmissions.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.DesignLeadFindingSubmissions.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_DesignLeadFindingSubmission", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.DesignLeadFindingSubmissions.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.DesignLeadFindingSubmissions.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_DesignLeadFindingSubmission", Storage="_Finding", ThisKey="FindingID", OtherKey="FindingID", IsForeignKey=true)]
		public Finding Finding
		{
			get
			{
				return this._Finding.Entity;
			}
			set
			{
				Finding previousValue = this._Finding.Entity;
				if (((previousValue != value) 
							|| (this._Finding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Finding.Entity = null;
						previousValue.DesignLeadFindingSubmissions.Remove(this);
					}
					this._Finding.Entity = value;
					if ((value != null))
					{
						value.DesignLeadFindingSubmissions.Add(this);
						this._FindingID = value.FindingID;
					}
					else
					{
						this._FindingID = default(int);
					}
					this.SendPropertyChanged("Finding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DesignOfficer")]
	public partial class DesignOfficer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DOID;
		
		private EntitySet<DLAssignment> _DLAssignments;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Task> _Tasks1;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDOIDChanging(int value);
    partial void OnDOIDChanged();
    #endregion
		
		public DesignOfficer()
		{
			this._DLAssignments = new EntitySet<DLAssignment>(new Action<DLAssignment>(this.attach_DLAssignments), new Action<DLAssignment>(this.detach_DLAssignments));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Tasks1 = new EntitySet<Task>(new Action<Task>(this.attach_Tasks1), new Action<Task>(this.detach_Tasks1));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DOID
		{
			get
			{
				return this._DOID;
			}
			set
			{
				if ((this._DOID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDOIDChanging(value);
					this.SendPropertyChanging();
					this._DOID = value;
					this.SendPropertyChanged("DOID");
					this.OnDOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_DLAssignment", Storage="_DLAssignments", ThisKey="DOID", OtherKey="DOID")]
		public EntitySet<DLAssignment> DLAssignments
		{
			get
			{
				return this._DLAssignments;
			}
			set
			{
				this._DLAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Project", Storage="_Projects", ThisKey="DOID", OtherKey="DOID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Task", Storage="_Tasks", ThisKey="DOID", OtherKey="DOID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Task1", Storage="_Tasks1", ThisKey="DOID", OtherKey="DOID")]
		public EntitySet<Task> Tasks1
		{
			get
			{
				return this._Tasks1;
			}
			set
			{
				this._Tasks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DesignOfficer", Storage="_Employee", ThisKey="DOID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.DesignOfficer = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.DesignOfficer = this;
						this._DOID = value.EmployeeID;
					}
					else
					{
						this._DOID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = this;
		}
		
		private void detach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer = null;
		}
		
		private void attach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer1 = this;
		}
		
		private void detach_Tasks1(Task entity)
		{
			this.SendPropertyChanging();
			entity.DesignOfficer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DLAssignment")]
	public partial class DLAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DOID;
		
		private int _DLID;
		
		private int _ProjectID;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<DesignOfficer> _DesignOfficer;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDOIDChanging(int value);
    partial void OnDOIDChanged();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public DLAssignment()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._DesignOfficer = default(EntityRef<DesignOfficer>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DOID
		{
			get
			{
				return this._DOID;
			}
			set
			{
				if ((this._DOID != value))
				{
					if (this._DesignOfficer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDOIDChanging(value);
					this.SendPropertyChanging();
					this._DOID = value;
					this.SendPropertyChanged("DOID");
					this.OnDOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_DLAssignment", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.DLAssignments.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.DLAssignments.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_DLAssignment", Storage="_DesignOfficer", ThisKey="DOID", OtherKey="DOID", IsForeignKey=true)]
		public DesignOfficer DesignOfficer
		{
			get
			{
				return this._DesignOfficer.Entity;
			}
			set
			{
				DesignOfficer previousValue = this._DesignOfficer.Entity;
				if (((previousValue != value) 
							|| (this._DesignOfficer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignOfficer.Entity = null;
						previousValue.DLAssignments.Remove(this);
					}
					this._DesignOfficer.Entity = value;
					if ((value != null))
					{
						value.DLAssignments.Add(this);
						this._DOID = value.DOID;
					}
					else
					{
						this._DOID = default(int);
					}
					this.SendPropertyChanged("DesignOfficer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_DLAssignment", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.DLAssignments.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.DLAssignments.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _JobTitle;
		
		private string _Mobile;
		
		private string _Password;
		
		private string _Email;
		
		private string _EmployeeType;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<DesignOfficer> _DesignOfficer;
		
		private EntityRef<TaskLead> _TaskLead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmployeeTypeChanging(string value);
    partial void OnEmployeeTypeChanged();
    #endregion
		
		public Employee()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._DesignOfficer = default(EntityRef<DesignOfficer>);
			this._TaskLead = default(EntityRef<TaskLead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeType", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string EmployeeType
		{
			get
			{
				return this._EmployeeType;
			}
			set
			{
				if ((this._EmployeeType != value))
				{
					this.OnEmployeeTypeChanging(value);
					this.SendPropertyChanging();
					this._EmployeeType = value;
					this.SendPropertyChanged("EmployeeType");
					this.OnEmployeeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DesignLead", Storage="_DesignLead", ThisKey="EmployeeID", OtherKey="DLID", IsUnique=true, IsForeignKey=false)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.Employee = null;
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_DesignOfficer", Storage="_DesignOfficer", ThisKey="EmployeeID", OtherKey="DOID", IsUnique=true, IsForeignKey=false)]
		public DesignOfficer DesignOfficer
		{
			get
			{
				return this._DesignOfficer.Entity;
			}
			set
			{
				DesignOfficer previousValue = this._DesignOfficer.Entity;
				if (((previousValue != value) 
							|| (this._DesignOfficer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignOfficer.Entity = null;
						previousValue.Employee = null;
					}
					this._DesignOfficer.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("DesignOfficer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TaskLead", Storage="_TaskLead", ThisKey="EmployeeID", OtherKey="TLID", IsUnique=true, IsForeignKey=false)]
		public TaskLead TaskLead
		{
			get
			{
				return this._TaskLead.Entity;
			}
			set
			{
				TaskLead previousValue = this._TaskLead.Entity;
				if (((previousValue != value) 
							|| (this._TaskLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskLead.Entity = null;
						previousValue.Employee = null;
					}
					this._TaskLead.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("TaskLead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImpactAnalysis")]
	public partial class ImpactAnalysi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImpactID;
		
		private string _Measures;
		
		private EntitySet<ImpactAnalysisUpload> _ImpactAnalysisUploads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImpactIDChanging(int value);
    partial void OnImpactIDChanged();
    partial void OnMeasuresChanging(string value);
    partial void OnMeasuresChanged();
    #endregion
		
		public ImpactAnalysi()
		{
			this._ImpactAnalysisUploads = new EntitySet<ImpactAnalysisUpload>(new Action<ImpactAnalysisUpload>(this.attach_ImpactAnalysisUploads), new Action<ImpactAnalysisUpload>(this.detach_ImpactAnalysisUploads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImpactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImpactID
		{
			get
			{
				return this._ImpactID;
			}
			set
			{
				if ((this._ImpactID != value))
				{
					this.OnImpactIDChanging(value);
					this.SendPropertyChanging();
					this._ImpactID = value;
					this.SendPropertyChanged("ImpactID");
					this.OnImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measures", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Measures
		{
			get
			{
				return this._Measures;
			}
			set
			{
				if ((this._Measures != value))
				{
					this.OnMeasuresChanging(value);
					this.SendPropertyChanging();
					this._Measures = value;
					this.SendPropertyChanged("Measures");
					this.OnMeasuresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImpactAnalysi_ImpactAnalysisUpload", Storage="_ImpactAnalysisUploads", ThisKey="ImpactID", OtherKey="ImpactID")]
		public EntitySet<ImpactAnalysisUpload> ImpactAnalysisUploads
		{
			get
			{
				return this._ImpactAnalysisUploads;
			}
			set
			{
				this._ImpactAnalysisUploads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.ImpactAnalysi = this;
		}
		
		private void detach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.ImpactAnalysi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImpactAnalysisUpload")]
	public partial class ImpactAnalysisUpload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private int _ImpactID;
		
		private int _ProjectID;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<ImpactAnalysi> _ImpactAnalysi;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnImpactIDChanging(int value);
    partial void OnImpactIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public ImpactAnalysisUpload()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._ImpactAnalysi = default(EntityRef<ImpactAnalysi>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImpactID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ImpactID
		{
			get
			{
				return this._ImpactID;
			}
			set
			{
				if ((this._ImpactID != value))
				{
					if (this._ImpactAnalysi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImpactIDChanging(value);
					this.SendPropertyChanging();
					this._ImpactID = value;
					this.SendPropertyChanged("ImpactID");
					this.OnImpactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_ImpactAnalysisUpload", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.ImpactAnalysisUploads.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.ImpactAnalysisUploads.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImpactAnalysi_ImpactAnalysisUpload", Storage="_ImpactAnalysi", ThisKey="ImpactID", OtherKey="ImpactID", IsForeignKey=true)]
		public ImpactAnalysi ImpactAnalysi
		{
			get
			{
				return this._ImpactAnalysi.Entity;
			}
			set
			{
				ImpactAnalysi previousValue = this._ImpactAnalysi.Entity;
				if (((previousValue != value) 
							|| (this._ImpactAnalysi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImpactAnalysi.Entity = null;
						previousValue.ImpactAnalysisUploads.Remove(this);
					}
					this._ImpactAnalysi.Entity = value;
					if ((value != null))
					{
						value.ImpactAnalysisUploads.Add(this);
						this._ImpactID = value.ImpactID;
					}
					else
					{
						this._ImpactID = default(int);
					}
					this.SendPropertyChanged("ImpactAnalysi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ImpactAnalysisUpload", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ImpactAnalysisUploads.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ImpactAnalysisUploads.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private string _Status;
		
		private System.DateTime _StartDate;
		
		private string _ProjectType;
		
		private System.DateTime _ExpectedEndDate;
		
		private System.Nullable<System.DateTime> _ActualEndDate;
		
		private string _Description;
		
		private string _ClientCommentEvaluation;
		
		private System.Nullable<int> _ClientID;
		
		private System.Nullable<int> _DOID;
		
		private string _DOComments;
		
		private EntitySet<CostProposal> _CostProposals;
		
		private EntitySet<DLAssignment> _DLAssignments;
		
		private EntitySet<ImpactAnalysisUpload> _ImpactAnalysisUploads;
		
		private EntitySet<ProjectCharterSubmission> _ProjectCharterSubmissions;
		
		private EntitySet<TaskCreation> _TaskCreations;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<DesignOfficer> _DesignOfficer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnProjectTypeChanging(string value);
    partial void OnProjectTypeChanged();
    partial void OnExpectedEndDateChanging(System.DateTime value);
    partial void OnExpectedEndDateChanged();
    partial void OnActualEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnClientCommentEvaluationChanging(string value);
    partial void OnClientCommentEvaluationChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnDOIDChanging(System.Nullable<int> value);
    partial void OnDOIDChanged();
    partial void OnDOCommentsChanging(string value);
    partial void OnDOCommentsChanged();
    #endregion
		
		public Project()
		{
			this._CostProposals = new EntitySet<CostProposal>(new Action<CostProposal>(this.attach_CostProposals), new Action<CostProposal>(this.detach_CostProposals));
			this._DLAssignments = new EntitySet<DLAssignment>(new Action<DLAssignment>(this.attach_DLAssignments), new Action<DLAssignment>(this.detach_DLAssignments));
			this._ImpactAnalysisUploads = new EntitySet<ImpactAnalysisUpload>(new Action<ImpactAnalysisUpload>(this.attach_ImpactAnalysisUploads), new Action<ImpactAnalysisUpload>(this.detach_ImpactAnalysisUploads));
			this._ProjectCharterSubmissions = new EntitySet<ProjectCharterSubmission>(new Action<ProjectCharterSubmission>(this.attach_ProjectCharterSubmissions), new Action<ProjectCharterSubmission>(this.detach_ProjectCharterSubmissions));
			this._TaskCreations = new EntitySet<TaskCreation>(new Action<TaskCreation>(this.attach_TaskCreations), new Action<TaskCreation>(this.detach_TaskCreations));
			this._Client = default(EntityRef<Client>);
			this._DesignOfficer = default(EntityRef<DesignOfficer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectType", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string ProjectType
		{
			get
			{
				return this._ProjectType;
			}
			set
			{
				if ((this._ProjectType != value))
				{
					this.OnProjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ProjectType = value;
					this.SendPropertyChanged("ProjectType");
					this.OnProjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedEndDate", DbType="Date NOT NULL")]
		public System.DateTime ExpectedEndDate
		{
			get
			{
				return this._ExpectedEndDate;
			}
			set
			{
				if ((this._ExpectedEndDate != value))
				{
					this.OnExpectedEndDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedEndDate = value;
					this.SendPropertyChanged("ExpectedEndDate");
					this.OnExpectedEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ActualEndDate
		{
			get
			{
				return this._ActualEndDate;
			}
			set
			{
				if ((this._ActualEndDate != value))
				{
					this.OnActualEndDateChanging(value);
					this.SendPropertyChanging();
					this._ActualEndDate = value;
					this.SendPropertyChanged("ActualEndDate");
					this.OnActualEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCommentEvaluation", DbType="VarChar(50)")]
		public string ClientCommentEvaluation
		{
			get
			{
				return this._ClientCommentEvaluation;
			}
			set
			{
				if ((this._ClientCommentEvaluation != value))
				{
					this.OnClientCommentEvaluationChanging(value);
					this.SendPropertyChanging();
					this._ClientCommentEvaluation = value;
					this.SendPropertyChanged("ClientCommentEvaluation");
					this.OnClientCommentEvaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOID", DbType="Int")]
		public System.Nullable<int> DOID
		{
			get
			{
				return this._DOID;
			}
			set
			{
				if ((this._DOID != value))
				{
					if (this._DesignOfficer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDOIDChanging(value);
					this.SendPropertyChanging();
					this._DOID = value;
					this.SendPropertyChanged("DOID");
					this.OnDOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOComments", DbType="VarChar(50)")]
		public string DOComments
		{
			get
			{
				return this._DOComments;
			}
			set
			{
				if ((this._DOComments != value))
				{
					this.OnDOCommentsChanging(value);
					this.SendPropertyChanging();
					this._DOComments = value;
					this.SendPropertyChanged("DOComments");
					this.OnDOCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CostProposal", Storage="_CostProposals", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<CostProposal> CostProposals
		{
			get
			{
				return this._CostProposals;
			}
			set
			{
				this._CostProposals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_DLAssignment", Storage="_DLAssignments", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<DLAssignment> DLAssignments
		{
			get
			{
				return this._DLAssignments;
			}
			set
			{
				this._DLAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ImpactAnalysisUpload", Storage="_ImpactAnalysisUploads", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ImpactAnalysisUpload> ImpactAnalysisUploads
		{
			get
			{
				return this._ImpactAnalysisUploads;
			}
			set
			{
				this._ImpactAnalysisUploads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectCharterSubmission", Storage="_ProjectCharterSubmissions", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectCharterSubmission> ProjectCharterSubmissions
		{
			get
			{
				return this._ProjectCharterSubmissions;
			}
			set
			{
				this._ProjectCharterSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskCreation", Storage="_TaskCreations", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<TaskCreation> TaskCreations
		{
			get
			{
				return this._TaskCreations;
			}
			set
			{
				this._TaskCreations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Project", Storage="_DesignOfficer", ThisKey="DOID", OtherKey="DOID", IsForeignKey=true)]
		public DesignOfficer DesignOfficer
		{
			get
			{
				return this._DesignOfficer.Entity;
			}
			set
			{
				DesignOfficer previousValue = this._DesignOfficer.Entity;
				if (((previousValue != value) 
							|| (this._DesignOfficer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignOfficer.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._DesignOfficer.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._DOID = value.DOID;
					}
					else
					{
						this._DOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DesignOfficer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CostProposals(CostProposal entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_CostProposals(CostProposal entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_DLAssignments(DLAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ImpactAnalysisUploads(ImpactAnalysisUpload entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectCharter")]
	public partial class ProjectCharter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharterID;
		
		private string _ProblemStatement;
		
		private string _Objectives;
		
		private EntitySet<ProjectCharterSubmission> _ProjectCharterSubmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharterIDChanging(int value);
    partial void OnCharterIDChanged();
    partial void OnProblemStatementChanging(string value);
    partial void OnProblemStatementChanged();
    partial void OnObjectivesChanging(string value);
    partial void OnObjectivesChanged();
    #endregion
		
		public ProjectCharter()
		{
			this._ProjectCharterSubmissions = new EntitySet<ProjectCharterSubmission>(new Action<ProjectCharterSubmission>(this.attach_ProjectCharterSubmissions), new Action<ProjectCharterSubmission>(this.detach_ProjectCharterSubmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CharterID
		{
			get
			{
				return this._CharterID;
			}
			set
			{
				if ((this._CharterID != value))
				{
					this.OnCharterIDChanging(value);
					this.SendPropertyChanging();
					this._CharterID = value;
					this.SendPropertyChanged("CharterID");
					this.OnCharterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemStatement", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProblemStatement
		{
			get
			{
				return this._ProblemStatement;
			}
			set
			{
				if ((this._ProblemStatement != value))
				{
					this.OnProblemStatementChanging(value);
					this.SendPropertyChanging();
					this._ProblemStatement = value;
					this.SendPropertyChanged("ProblemStatement");
					this.OnProblemStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Objectives", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Objectives
		{
			get
			{
				return this._Objectives;
			}
			set
			{
				if ((this._Objectives != value))
				{
					this.OnObjectivesChanging(value);
					this.SendPropertyChanging();
					this._Objectives = value;
					this.SendPropertyChanged("Objectives");
					this.OnObjectivesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCharter_ProjectCharterSubmission", Storage="_ProjectCharterSubmissions", ThisKey="CharterID", OtherKey="CharterID")]
		public EntitySet<ProjectCharterSubmission> ProjectCharterSubmissions
		{
			get
			{
				return this._ProjectCharterSubmissions;
			}
			set
			{
				this._ProjectCharterSubmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCharter = this;
		}
		
		private void detach_ProjectCharterSubmissions(ProjectCharterSubmission entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCharter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectCharterSubmission")]
	public partial class ProjectCharterSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private int _CharterID;
		
		private int _ProjectID;
		
		private string _date;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectCharter> _ProjectCharter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnCharterIDChanging(int value);
    partial void OnCharterIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OndateChanging(string value);
    partial void OndateChanged();
    #endregion
		
		public ProjectCharterSubmission()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._Project = default(EntityRef<Project>);
			this._ProjectCharter = default(EntityRef<ProjectCharter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CharterID
		{
			get
			{
				return this._CharterID;
			}
			set
			{
				if ((this._CharterID != value))
				{
					if (this._ProjectCharter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharterIDChanging(value);
					this.SendPropertyChanging();
					this._CharterID = value;
					this.SendPropertyChanged("CharterID");
					this.OnCharterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_ProjectCharterSubmission", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.ProjectCharterSubmissions.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.ProjectCharterSubmissions.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectCharterSubmission", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectCharterSubmissions.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectCharterSubmissions.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCharter_ProjectCharterSubmission", Storage="_ProjectCharter", ThisKey="CharterID", OtherKey="CharterID", IsForeignKey=true)]
		public ProjectCharter ProjectCharter
		{
			get
			{
				return this._ProjectCharter.Entity;
			}
			set
			{
				ProjectCharter previousValue = this._ProjectCharter.Entity;
				if (((previousValue != value) 
							|| (this._ProjectCharter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectCharter.Entity = null;
						previousValue.ProjectCharterSubmissions.Remove(this);
					}
					this._ProjectCharter.Entity = value;
					if ((value != null))
					{
						value.ProjectCharterSubmissions.Add(this);
						this._CharterID = value.CharterID;
					}
					else
					{
						this._CharterID = default(int);
					}
					this.SendPropertyChanged("ProjectCharter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectDefinition")]
	public partial class ProjectDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostProposalID;
		
		private string _Scope;
		
		private string _Deliverable;
		
		private string _Catergory;
		
		private EntityRef<CostProposal> _CostProposal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostProposalIDChanging(int value);
    partial void OnCostProposalIDChanged();
    partial void OnScopeChanging(string value);
    partial void OnScopeChanged();
    partial void OnDeliverableChanging(string value);
    partial void OnDeliverableChanged();
    partial void OnCatergoryChanging(string value);
    partial void OnCatergoryChanged();
    #endregion
		
		public ProjectDefinition()
		{
			this._CostProposal = default(EntityRef<CostProposal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostProposalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CostProposalID
		{
			get
			{
				return this._CostProposalID;
			}
			set
			{
				if ((this._CostProposalID != value))
				{
					if (this._CostProposal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostProposalIDChanging(value);
					this.SendPropertyChanging();
					this._CostProposalID = value;
					this.SendPropertyChanged("CostProposalID");
					this.OnCostProposalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scope", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Scope
		{
			get
			{
				return this._Scope;
			}
			set
			{
				if ((this._Scope != value))
				{
					this.OnScopeChanging(value);
					this.SendPropertyChanging();
					this._Scope = value;
					this.SendPropertyChanged("Scope");
					this.OnScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deliverable", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Deliverable
		{
			get
			{
				return this._Deliverable;
			}
			set
			{
				if ((this._Deliverable != value))
				{
					this.OnDeliverableChanging(value);
					this.SendPropertyChanging();
					this._Deliverable = value;
					this.SendPropertyChanged("Deliverable");
					this.OnDeliverableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catergory", DbType="NChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Catergory
		{
			get
			{
				return this._Catergory;
			}
			set
			{
				if ((this._Catergory != value))
				{
					this.OnCatergoryChanging(value);
					this.SendPropertyChanging();
					this._Catergory = value;
					this.SendPropertyChanged("Catergory");
					this.OnCatergoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposal_ProjectDefinition", Storage="_CostProposal", ThisKey="CostProposalID", OtherKey="CostProposalID", IsForeignKey=true)]
		public CostProposal CostProposal
		{
			get
			{
				return this._CostProposal.Entity;
			}
			set
			{
				CostProposal previousValue = this._CostProposal.Entity;
				if (((previousValue != value) 
							|| (this._CostProposal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostProposal.Entity = null;
						previousValue.ProjectDefinitions.Remove(this);
					}
					this._CostProposal.Entity = value;
					if ((value != null))
					{
						value.ProjectDefinitions.Add(this);
						this._CostProposalID = value.CostProposalID;
					}
					else
					{
						this._CostProposalID = default(int);
					}
					this.SendPropertyChanged("CostProposal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScopeDeliverable")]
	public partial class ScopeDeliverable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScopeID;
		
		private string _Deliverable;
		
		private EntityRef<CostProposalScope> _CostProposalScope;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScopeIDChanging(int value);
    partial void OnScopeIDChanged();
    partial void OnDeliverableChanging(string value);
    partial void OnDeliverableChanged();
    #endregion
		
		public ScopeDeliverable()
		{
			this._CostProposalScope = default(EntityRef<CostProposalScope>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScopeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScopeID
		{
			get
			{
				return this._ScopeID;
			}
			set
			{
				if ((this._ScopeID != value))
				{
					if (this._CostProposalScope.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScopeIDChanging(value);
					this.SendPropertyChanging();
					this._ScopeID = value;
					this.SendPropertyChanged("ScopeID");
					this.OnScopeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deliverable", DbType="VarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Deliverable
		{
			get
			{
				return this._Deliverable;
			}
			set
			{
				if ((this._Deliverable != value))
				{
					this.OnDeliverableChanging(value);
					this.SendPropertyChanging();
					this._Deliverable = value;
					this.SendPropertyChanged("Deliverable");
					this.OnDeliverableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostProposalScope_ScopeDeliverable", Storage="_CostProposalScope", ThisKey="ScopeID", OtherKey="ScopeID", IsForeignKey=true)]
		public CostProposalScope CostProposalScope
		{
			get
			{
				return this._CostProposalScope.Entity;
			}
			set
			{
				CostProposalScope previousValue = this._CostProposalScope.Entity;
				if (((previousValue != value) 
							|| (this._CostProposalScope.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostProposalScope.Entity = null;
						previousValue.ScopeDeliverables.Remove(this);
					}
					this._CostProposalScope.Entity = value;
					if ((value != null))
					{
						value.ScopeDeliverables.Add(this);
						this._ScopeID = value.ScopeID;
					}
					else
					{
						this._ScopeID = default(int);
					}
					this.SendPropertyChanged("CostProposalScope");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskCreation")]
	public partial class TaskCreation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private int _TaskID;
		
		private int _ProjectID;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public TaskCreation()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._Project = default(EntityRef<Project>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_TaskCreation", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.TaskCreations.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.TaskCreations.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskCreation", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TaskCreations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TaskCreations.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskCreation", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskCreations.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskCreations.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskFinding")]
	public partial class TaskFinding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private int _FindingID;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Finding> _Finding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnFindingIDChanging(int value);
    partial void OnFindingIDChanged();
    #endregion
		
		public TaskFinding()
		{
			this._Task = default(EntityRef<Task>);
			this._Finding = default(EntityRef<Finding>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FindingID
		{
			get
			{
				return this._FindingID;
			}
			set
			{
				if ((this._FindingID != value))
				{
					if (this._Finding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFindingIDChanging(value);
					this.SendPropertyChanging();
					this._FindingID = value;
					this.SendPropertyChanged("FindingID");
					this.OnFindingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskFinding", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskFindings.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskFindings.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_TaskFinding", Storage="_Finding", ThisKey="FindingID", OtherKey="FindingID", IsForeignKey=true)]
		public Finding Finding
		{
			get
			{
				return this._Finding.Entity;
			}
			set
			{
				Finding previousValue = this._Finding.Entity;
				if (((previousValue != value) 
							|| (this._Finding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Finding.Entity = null;
						previousValue.TaskFindings.Remove(this);
					}
					this._Finding.Entity = value;
					if ((value != null))
					{
						value.TaskFindings.Add(this);
						this._FindingID = value.FindingID;
					}
					else
					{
						this._FindingID = default(int);
					}
					this.SendPropertyChanged("Finding");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskLead")]
	public partial class TaskLead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TLID;
		
		private EntitySet<TaskLeadAssignment> _TaskLeadAssignments;
		
		private EntitySet<TaskLeadFindingSubmission> _TaskLeadFindingSubmissions;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTLIDChanging(int value);
    partial void OnTLIDChanged();
    #endregion
		
		public TaskLead()
		{
			this._TaskLeadAssignments = new EntitySet<TaskLeadAssignment>(new Action<TaskLeadAssignment>(this.attach_TaskLeadAssignments), new Action<TaskLeadAssignment>(this.detach_TaskLeadAssignments));
			this._TaskLeadFindingSubmissions = new EntitySet<TaskLeadFindingSubmission>(new Action<TaskLeadFindingSubmission>(this.attach_TaskLeadFindingSubmissions), new Action<TaskLeadFindingSubmission>(this.detach_TaskLeadFindingSubmissions));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TLID
		{
			get
			{
				return this._TLID;
			}
			set
			{
				if ((this._TLID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTLIDChanging(value);
					this.SendPropertyChanging();
					this._TLID = value;
					this.SendPropertyChanged("TLID");
					this.OnTLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskLead_TaskLeadAssignment", Storage="_TaskLeadAssignments", ThisKey="TLID", OtherKey="TLID")]
		public EntitySet<TaskLeadAssignment> TaskLeadAssignments
		{
			get
			{
				return this._TaskLeadAssignments;
			}
			set
			{
				this._TaskLeadAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskLead_TaskLeadFindingSubmission", Storage="_TaskLeadFindingSubmissions", ThisKey="TLID", OtherKey="TLID")]
		public EntitySet<TaskLeadFindingSubmission> TaskLeadFindingSubmissions
		{
			get
			{
				return this._TaskLeadFindingSubmissions;
			}
			set
			{
				this._TaskLeadFindingSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TaskLead", Storage="_Employee", ThisKey="TLID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TaskLead = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TaskLead = this;
						this._TLID = value.EmployeeID;
					}
					else
					{
						this._TLID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.TaskLead = this;
		}
		
		private void detach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.TaskLead = null;
		}
		
		private void attach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.TaskLead = this;
		}
		
		private void detach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.TaskLead = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskLeadAssignment")]
	public partial class TaskLeadAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DLID;
		
		private int _TLID;
		
		private int _TaskID;
		
		private EntityRef<DesignLead> _DesignLead;
		
		private EntityRef<TaskLead> _TaskLead;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDLIDChanging(int value);
    partial void OnDLIDChanged();
    partial void OnTLIDChanging(int value);
    partial void OnTLIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TaskLeadAssignment()
		{
			this._DesignLead = default(EntityRef<DesignLead>);
			this._TaskLead = default(EntityRef<TaskLead>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DLID
		{
			get
			{
				return this._DLID;
			}
			set
			{
				if ((this._DLID != value))
				{
					if (this._DesignLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDLIDChanging(value);
					this.SendPropertyChanging();
					this._DLID = value;
					this.SendPropertyChanged("DLID");
					this.OnDLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TLID
		{
			get
			{
				return this._TLID;
			}
			set
			{
				if ((this._TLID != value))
				{
					if (this._TaskLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTLIDChanging(value);
					this.SendPropertyChanging();
					this._TLID = value;
					this.SendPropertyChanged("TLID");
					this.OnTLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignLead_TaskLeadAssignment", Storage="_DesignLead", ThisKey="DLID", OtherKey="DLID", IsForeignKey=true)]
		public DesignLead DesignLead
		{
			get
			{
				return this._DesignLead.Entity;
			}
			set
			{
				DesignLead previousValue = this._DesignLead.Entity;
				if (((previousValue != value) 
							|| (this._DesignLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignLead.Entity = null;
						previousValue.TaskLeadAssignments.Remove(this);
					}
					this._DesignLead.Entity = value;
					if ((value != null))
					{
						value.TaskLeadAssignments.Add(this);
						this._DLID = value.DLID;
					}
					else
					{
						this._DLID = default(int);
					}
					this.SendPropertyChanged("DesignLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskLead_TaskLeadAssignment", Storage="_TaskLead", ThisKey="TLID", OtherKey="TLID", IsForeignKey=true)]
		public TaskLead TaskLead
		{
			get
			{
				return this._TaskLead.Entity;
			}
			set
			{
				TaskLead previousValue = this._TaskLead.Entity;
				if (((previousValue != value) 
							|| (this._TaskLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskLead.Entity = null;
						previousValue.TaskLeadAssignments.Remove(this);
					}
					this._TaskLead.Entity = value;
					if ((value != null))
					{
						value.TaskLeadAssignments.Add(this);
						this._TLID = value.TLID;
					}
					else
					{
						this._TLID = default(int);
					}
					this.SendPropertyChanged("TaskLead");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskLeadAssignment", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskLeadAssignments.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskLeadAssignments.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.DateTime _ExpectedEndDate;
		
		private System.Nullable<System.DateTime> _ActualEndDate;
		
		private System.Nullable<int> _DOID;
		
		private string _DONotes;
		
		private string _Status;
		
		private EntitySet<DesignLeadFindingSubmission> _DesignLeadFindingSubmissions;
		
		private EntitySet<TaskCreation> _TaskCreations;
		
		private EntitySet<TaskFinding> _TaskFindings;
		
		private EntitySet<TaskLeadAssignment> _TaskLeadAssignments;
		
		private EntitySet<TaskLeadFindingSubmission> _TaskLeadFindingSubmissions;
		
		private EntityRef<DesignOfficer> _DesignOfficer;
		
		private EntityRef<DesignOfficer> _DesignOfficer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnExpectedEndDateChanging(System.DateTime value);
    partial void OnExpectedEndDateChanged();
    partial void OnActualEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualEndDateChanged();
    partial void OnDOIDChanging(System.Nullable<int> value);
    partial void OnDOIDChanged();
    partial void OnDONotesChanging(string value);
    partial void OnDONotesChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Task()
		{
			this._DesignLeadFindingSubmissions = new EntitySet<DesignLeadFindingSubmission>(new Action<DesignLeadFindingSubmission>(this.attach_DesignLeadFindingSubmissions), new Action<DesignLeadFindingSubmission>(this.detach_DesignLeadFindingSubmissions));
			this._TaskCreations = new EntitySet<TaskCreation>(new Action<TaskCreation>(this.attach_TaskCreations), new Action<TaskCreation>(this.detach_TaskCreations));
			this._TaskFindings = new EntitySet<TaskFinding>(new Action<TaskFinding>(this.attach_TaskFindings), new Action<TaskFinding>(this.detach_TaskFindings));
			this._TaskLeadAssignments = new EntitySet<TaskLeadAssignment>(new Action<TaskLeadAssignment>(this.attach_TaskLeadAssignments), new Action<TaskLeadAssignment>(this.detach_TaskLeadAssignments));
			this._TaskLeadFindingSubmissions = new EntitySet<TaskLeadFindingSubmission>(new Action<TaskLeadFindingSubmission>(this.attach_TaskLeadFindingSubmissions), new Action<TaskLeadFindingSubmission>(this.detach_TaskLeadFindingSubmissions));
			this._DesignOfficer = default(EntityRef<DesignOfficer>);
			this._DesignOfficer1 = default(EntityRef<DesignOfficer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedEndDate", DbType="Date NOT NULL")]
		public System.DateTime ExpectedEndDate
		{
			get
			{
				return this._ExpectedEndDate;
			}
			set
			{
				if ((this._ExpectedEndDate != value))
				{
					this.OnExpectedEndDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedEndDate = value;
					this.SendPropertyChanged("ExpectedEndDate");
					this.OnExpectedEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ActualEndDate
		{
			get
			{
				return this._ActualEndDate;
			}
			set
			{
				if ((this._ActualEndDate != value))
				{
					this.OnActualEndDateChanging(value);
					this.SendPropertyChanging();
					this._ActualEndDate = value;
					this.SendPropertyChanged("ActualEndDate");
					this.OnActualEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOID", DbType="Int")]
		public System.Nullable<int> DOID
		{
			get
			{
				return this._DOID;
			}
			set
			{
				if ((this._DOID != value))
				{
					if ((this._DesignOfficer.HasLoadedOrAssignedValue || this._DesignOfficer1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDOIDChanging(value);
					this.SendPropertyChanging();
					this._DOID = value;
					this.SendPropertyChanged("DOID");
					this.OnDOIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DONotes", DbType="VarChar(50)")]
		public string DONotes
		{
			get
			{
				return this._DONotes;
			}
			set
			{
				if ((this._DONotes != value))
				{
					this.OnDONotesChanging(value);
					this.SendPropertyChanging();
					this._DONotes = value;
					this.SendPropertyChanged("DONotes");
					this.OnDONotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_DesignLeadFindingSubmission", Storage="_DesignLeadFindingSubmissions", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<DesignLeadFindingSubmission> DesignLeadFindingSubmissions
		{
			get
			{
				return this._DesignLeadFindingSubmissions;
			}
			set
			{
				this._DesignLeadFindingSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskCreation", Storage="_TaskCreations", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskCreation> TaskCreations
		{
			get
			{
				return this._TaskCreations;
			}
			set
			{
				this._TaskCreations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskFinding", Storage="_TaskFindings", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskFinding> TaskFindings
		{
			get
			{
				return this._TaskFindings;
			}
			set
			{
				this._TaskFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskLeadAssignment", Storage="_TaskLeadAssignments", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskLeadAssignment> TaskLeadAssignments
		{
			get
			{
				return this._TaskLeadAssignments;
			}
			set
			{
				this._TaskLeadAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskLeadFindingSubmission", Storage="_TaskLeadFindingSubmissions", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskLeadFindingSubmission> TaskLeadFindingSubmissions
		{
			get
			{
				return this._TaskLeadFindingSubmissions;
			}
			set
			{
				this._TaskLeadFindingSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Task", Storage="_DesignOfficer", ThisKey="DOID", OtherKey="DOID", IsForeignKey=true)]
		public DesignOfficer DesignOfficer
		{
			get
			{
				return this._DesignOfficer.Entity;
			}
			set
			{
				DesignOfficer previousValue = this._DesignOfficer.Entity;
				if (((previousValue != value) 
							|| (this._DesignOfficer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignOfficer.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._DesignOfficer.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._DOID = value.DOID;
					}
					else
					{
						this._DOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DesignOfficer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DesignOfficer_Task1", Storage="_DesignOfficer1", ThisKey="DOID", OtherKey="DOID", IsForeignKey=true)]
		public DesignOfficer DesignOfficer1
		{
			get
			{
				return this._DesignOfficer1.Entity;
			}
			set
			{
				DesignOfficer previousValue = this._DesignOfficer1.Entity;
				if (((previousValue != value) 
							|| (this._DesignOfficer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DesignOfficer1.Entity = null;
						previousValue.Tasks1.Remove(this);
					}
					this._DesignOfficer1.Entity = value;
					if ((value != null))
					{
						value.Tasks1.Add(this);
						this._DOID = value.DOID;
					}
					else
					{
						this._DOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DesignOfficer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskCreations(TaskCreation entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskFindings(TaskFinding entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskFindings(TaskFinding entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskLeadAssignments(TaskLeadAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Finding")]
	public partial class Finding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FindingID;
		
		private string _FindingName;
		
		private string _FindingDescription;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _FindingType;
		
		private string _FindingResult;
		
		private string _ClientNotes;
		
		private System.Nullable<int> _ClientID;
		
		private EntitySet<DesignLeadFindingSubmission> _DesignLeadFindingSubmissions;
		
		private EntitySet<TaskFinding> _TaskFindings;
		
		private EntitySet<TaskLeadFindingSubmission> _TaskLeadFindingSubmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFindingIDChanging(int value);
    partial void OnFindingIDChanged();
    partial void OnFindingNameChanging(string value);
    partial void OnFindingNameChanged();
    partial void OnFindingDescriptionChanging(string value);
    partial void OnFindingDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnFindingTypeChanging(string value);
    partial void OnFindingTypeChanged();
    partial void OnFindingResultChanging(string value);
    partial void OnFindingResultChanged();
    partial void OnClientNotesChanging(string value);
    partial void OnClientNotesChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    #endregion
		
		public Finding()
		{
			this._DesignLeadFindingSubmissions = new EntitySet<DesignLeadFindingSubmission>(new Action<DesignLeadFindingSubmission>(this.attach_DesignLeadFindingSubmissions), new Action<DesignLeadFindingSubmission>(this.detach_DesignLeadFindingSubmissions));
			this._TaskFindings = new EntitySet<TaskFinding>(new Action<TaskFinding>(this.attach_TaskFindings), new Action<TaskFinding>(this.detach_TaskFindings));
			this._TaskLeadFindingSubmissions = new EntitySet<TaskLeadFindingSubmission>(new Action<TaskLeadFindingSubmission>(this.attach_TaskLeadFindingSubmissions), new Action<TaskLeadFindingSubmission>(this.detach_TaskLeadFindingSubmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FindingID
		{
			get
			{
				return this._FindingID;
			}
			set
			{
				if ((this._FindingID != value))
				{
					this.OnFindingIDChanging(value);
					this.SendPropertyChanging();
					this._FindingID = value;
					this.SendPropertyChanged("FindingID");
					this.OnFindingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FindingName
		{
			get
			{
				return this._FindingName;
			}
			set
			{
				if ((this._FindingName != value))
				{
					this.OnFindingNameChanging(value);
					this.SendPropertyChanging();
					this._FindingName = value;
					this.SendPropertyChanged("FindingName");
					this.OnFindingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FindingDescription
		{
			get
			{
				return this._FindingDescription;
			}
			set
			{
				if ((this._FindingDescription != value))
				{
					this.OnFindingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FindingDescription = value;
					this.SendPropertyChanged("FindingDescription");
					this.OnFindingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingType", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string FindingType
		{
			get
			{
				return this._FindingType;
			}
			set
			{
				if ((this._FindingType != value))
				{
					this.OnFindingTypeChanging(value);
					this.SendPropertyChanging();
					this._FindingType = value;
					this.SendPropertyChanged("FindingType");
					this.OnFindingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingResult", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FindingResult
		{
			get
			{
				return this._FindingResult;
			}
			set
			{
				if ((this._FindingResult != value))
				{
					this.OnFindingResultChanging(value);
					this.SendPropertyChanging();
					this._FindingResult = value;
					this.SendPropertyChanged("FindingResult");
					this.OnFindingResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientNotes", DbType="VarChar(50)")]
		public string ClientNotes
		{
			get
			{
				return this._ClientNotes;
			}
			set
			{
				if ((this._ClientNotes != value))
				{
					this.OnClientNotesChanging(value);
					this.SendPropertyChanging();
					this._ClientNotes = value;
					this.SendPropertyChanged("ClientNotes");
					this.OnClientNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_DesignLeadFindingSubmission", Storage="_DesignLeadFindingSubmissions", ThisKey="FindingID", OtherKey="FindingID")]
		public EntitySet<DesignLeadFindingSubmission> DesignLeadFindingSubmissions
		{
			get
			{
				return this._DesignLeadFindingSubmissions;
			}
			set
			{
				this._DesignLeadFindingSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_TaskFinding", Storage="_TaskFindings", ThisKey="FindingID", OtherKey="FindingID")]
		public EntitySet<TaskFinding> TaskFindings
		{
			get
			{
				return this._TaskFindings;
			}
			set
			{
				this._TaskFindings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_TaskLeadFindingSubmission", Storage="_TaskLeadFindingSubmissions", ThisKey="FindingID", OtherKey="FindingID")]
		public EntitySet<TaskLeadFindingSubmission> TaskLeadFindingSubmissions
		{
			get
			{
				return this._TaskLeadFindingSubmissions;
			}
			set
			{
				this._TaskLeadFindingSubmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Finding = this;
		}
		
		private void detach_DesignLeadFindingSubmissions(DesignLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Finding = null;
		}
		
		private void attach_TaskFindings(TaskFinding entity)
		{
			this.SendPropertyChanging();
			entity.Finding = this;
		}
		
		private void detach_TaskFindings(TaskFinding entity)
		{
			this.SendPropertyChanging();
			entity.Finding = null;
		}
		
		private void attach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Finding = this;
		}
		
		private void detach_TaskLeadFindingSubmissions(TaskLeadFindingSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Finding = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskLeadFindingSubmission")]
	public partial class TaskLeadFindingSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TLID;
		
		private int _FindingID;
		
		private int _TaskID;
		
		private EntityRef<Finding> _Finding;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<TaskLead> _TaskLead;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTLIDChanging(int value);
    partial void OnTLIDChanged();
    partial void OnFindingIDChanging(int value);
    partial void OnFindingIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    #endregion
		
		public TaskLeadFindingSubmission()
		{
			this._Finding = default(EntityRef<Finding>);
			this._Task = default(EntityRef<Task>);
			this._TaskLead = default(EntityRef<TaskLead>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TLID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TLID
		{
			get
			{
				return this._TLID;
			}
			set
			{
				if ((this._TLID != value))
				{
					if (this._TaskLead.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTLIDChanging(value);
					this.SendPropertyChanging();
					this._TLID = value;
					this.SendPropertyChanged("TLID");
					this.OnTLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FindingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FindingID
		{
			get
			{
				return this._FindingID;
			}
			set
			{
				if ((this._FindingID != value))
				{
					if (this._Finding.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFindingIDChanging(value);
					this.SendPropertyChanging();
					this._FindingID = value;
					this.SendPropertyChanged("FindingID");
					this.OnFindingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Finding_TaskLeadFindingSubmission", Storage="_Finding", ThisKey="FindingID", OtherKey="FindingID", IsForeignKey=true)]
		public Finding Finding
		{
			get
			{
				return this._Finding.Entity;
			}
			set
			{
				Finding previousValue = this._Finding.Entity;
				if (((previousValue != value) 
							|| (this._Finding.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Finding.Entity = null;
						previousValue.TaskLeadFindingSubmissions.Remove(this);
					}
					this._Finding.Entity = value;
					if ((value != null))
					{
						value.TaskLeadFindingSubmissions.Add(this);
						this._FindingID = value.FindingID;
					}
					else
					{
						this._FindingID = default(int);
					}
					this.SendPropertyChanged("Finding");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskLeadFindingSubmission", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskLeadFindingSubmissions.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskLeadFindingSubmissions.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskLead_TaskLeadFindingSubmission", Storage="_TaskLead", ThisKey="TLID", OtherKey="TLID", IsForeignKey=true)]
		public TaskLead TaskLead
		{
			get
			{
				return this._TaskLead.Entity;
			}
			set
			{
				TaskLead previousValue = this._TaskLead.Entity;
				if (((previousValue != value) 
							|| (this._TaskLead.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskLead.Entity = null;
						previousValue.TaskLeadFindingSubmissions.Remove(this);
					}
					this._TaskLead.Entity = value;
					if ((value != null))
					{
						value.TaskLeadFindingSubmissions.Add(this);
						this._TLID = value.TLID;
					}
					else
					{
						this._TLID = default(int);
					}
					this.SendPropertyChanged("TaskLead");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
